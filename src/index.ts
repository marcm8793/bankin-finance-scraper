import "dotenv/config";
import { BankinScraper } from "./bankin-scraper";
import {
  getCredentialsFromEnv,
  areDefaultCredentials,
  logWarning,
  parseFrenchAmount,
} from "./utils";

/**
 * Fonction principale pour ex√©cuter le script de connexion Bankin
 */
async function main(): Promise<void> {
  console.log("üöÄ D√©marrage de l'automatisation de connexion Bankin...");

  // R√©cup√©ration des identifiants depuis les variables d'environnement
  const credentials = getCredentialsFromEnv();

  // V√©rification si les identifiants par d√©faut sont utilis√©s
  if (areDefaultCredentials(credentials)) {
    logWarning(
      "Vous utilisez les identifiants par d√©faut. Veuillez configurer vos vrais identifiants dans le fichier .env"
    );
  }

  // Cr√©ation d'une instance du scraper
  const scraper = new BankinScraper();

  try {
    // Ex√©cution de la connexion
    const result = await scraper.login(credentials);

    // Affichage du r√©sultat
    console.log("\nüìä R√©sultat de la connexion:");
    console.log(`   Succ√®s: ${result.success ? "‚úÖ" : "‚ùå"}`);
    console.log(`   URL: ${result.currentUrl}`);
    console.log(`   Message: ${result.message}`);

    // Si la connexion a r√©ussi, r√©cup√©rer les d√©penses et les revenus
    if (result.success) {
      const currentMonth = new Date().toLocaleString("fr-FR", {
        month: "long",
      });

      // R√©cup√©ration des d√©penses
      console.log("\nüí∏ R√©cup√©ration des d√©penses...");
      const expensesResult = await scraper.getExpensesTotal(currentMonth);

      console.log("\nüìà R√©sultat des d√©penses:");
      console.log(`   Succ√®s: ${expensesResult.success ? "‚úÖ" : "‚ùå"}`);
      console.log(`   Mois: ${expensesResult.currentMonth}`);
      console.log(`   Total: ${expensesResult.total}`);
      console.log(`   Message: ${expensesResult.message}`);

      // R√©cup√©ration des revenus
      console.log("\nüí∞ R√©cup√©ration des revenus...");
      const incomesResult = await scraper.getIncomesTotal(currentMonth);

      console.log("\nüìà R√©sultat des revenus:");
      console.log(`   Succ√®s: ${incomesResult.success ? "‚úÖ" : "‚ùå"}`);
      console.log(`   Mois: ${incomesResult.currentMonth}`);
      console.log(`   Total: ${incomesResult.total}`);
      console.log(`   Message: ${incomesResult.message}`);

      // Calcul du solde net si les deux op√©rations ont r√©ussi
      if (expensesResult.success && incomesResult.success) {
        const expensesAmount = parseFrenchAmount(expensesResult.total);
        const incomesAmount = parseFrenchAmount(incomesResult.total);
        const netBalance = incomesAmount - expensesAmount;

        console.log("\nüíº R√©sum√© financier:");
        console.log(`   Revenus: ${incomesResult.total}`);
        console.log(`   D√©penses: ${expensesResult.total}`);
        console.log(`   Solde net: ${netBalance.toFixed(2)} ‚Ç¨`);
      }
    }

    // Code de sortie bas√© sur le succ√®s
    process.exit(result.success ? 0 : 1);
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Erreur inconnue";
    console.error(`‚ùå Erreur fatale: ${errorMessage}`);
    process.exit(1);
  } finally {
    // Nettoyage: fermeture du navigateur
    await scraper.close();
  }
}

// Gestion des erreurs non captur√©es
process.on("unhandledRejection", (reason) => {
  console.error("‚ùå Promesse rejet√©e non g√©r√©e:", reason);
  process.exit(1);
});

process.on("uncaughtException", (error) => {
  console.error("‚ùå Exception non captur√©e:", error);
  process.exit(1);
});

// Gestion de l'interruption (Ctrl+C)
process.on("SIGINT", () => {
  console.log("\nüõë Interruption d√©tect√©e. Arr√™t du script...");
  process.exit(0);
});

// Ex√©cution du script principal
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå Erreur dans la fonction principale:", error);
    process.exit(1);
  });
}
